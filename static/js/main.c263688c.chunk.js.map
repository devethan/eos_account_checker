{"version":3,"sources":["MakeColumns.js","App.js","serviceWorker.js","index.js"],"names":["make_cols","refstr","o","C","XLSX","utils","decode_range","e","c","i","name","encode_col","key","config","chainId","httpEndpoint","expireInSeconds","broadcast","verbose","ExcelReader","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","eosChecker","_ref","asyncToGenerator","regenerator_default","a","mark","_callee2","data","eos","success","successFormatIssues","invalid","promise","wrap","_context2","prev","next","Eos","map","_ref2","_callee","item","account_name","account_name2","itemChecker","_context","trim","toLowerCase","checker","format","getAccount","then","res","catch","err","push","setState","stop","_x2","apply","arguments","sent","Promise","all","console","log","_x","ethChecker","alert","state","file","cols","isFetching","handleFile","bind","assertThisInitialized","handleChange","files","target","_this2","type","_ref3","reader","FileReader","rABS","readAsBinaryString","onload","_ref4","_callee3","bstr","wb","wsname","ws","_context3","result","read","bookVBA","SheetNames","Sheets","sheet_to_json","JSON","stringify","_x3","readAsArrayBuffer","_this3","total","Number","length","react_default","createElement","style","display","alignItems","flexDirection","width","height","backgroundColor","borderRadius","justifyContent","htmlFor","className","id","accept","SheetJSFT","onChange","value","onClick","textAlign","fontSize","fontWeight","marginBottom","color","margin","marginTop","Component","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"maAEaA,EAAY,SAAAC,GAGvB,IAFA,IAAIC,EAAI,GACNC,EAAIC,IAAKC,MAAMC,aAAaL,GAAQM,EAAEC,EAAI,EACnCC,EAAI,EAAGA,EAAIN,IAAKM,EAAGP,EAAEO,GAAK,CAAEC,KAAMN,IAAKC,MAAMM,WAAWF,GAAIG,IAAKH,GAC1E,OAAOP,8BCKHW,EAAS,CACbC,QAAS,mEACTC,aAAc,kCACdC,gBAAiB,GACjBC,WAAW,EACXC,SAAS,GAiPIC,cA7Ob,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KA8DRQ,WA/DmB,eAAAC,EAAAP,OAAAQ,EAAA,EAAAR,CAAAS,EAAAC,EAAAC,KA+DN,SAAAC,EAAMC,GAAN,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAT,EAAAC,EAAAS,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACLR,EAAMS,IAAIhC,GACVwB,EAAU,GACVC,EAAsB,GACtBC,EAAU,GAJLG,EAAAE,KAAA,EAMWT,EAAKW,IAAL,eAAAC,EAAAzB,OAAAQ,EAAA,EAAAR,CAAAS,EAAAC,EAAAC,KAAS,SAAAe,EAAMC,GAAN,IAAAC,EAAAC,EAAAC,EAAA,OAAArB,EAAAC,EAAAS,KAAA,SAAAY,GAAA,cAAAA,EAAAV,KAAAU,EAAAT,MAAA,cACvBM,EAAeD,EAAKC,aACpBC,EAAgBF,EAAKC,aAAaI,OAAOC,eAEzCH,EAAc,CAClBF,aAAcC,EACdK,QAAS,KAIMC,OADjBP,IAAiBC,EATYE,EAAAT,KAAA,EAavBR,EACHsB,WAAWN,EAAYF,cACvBS,KAAK,SAAAC,GAAG,OAAKR,EAAYI,QAAU,MACnCK,MAAM,SAAAC,GAAG,OAAKV,EAAYI,QAAU,MAhBV,OAkBD,MAAxBJ,EAAYI,QACdjB,EAAQwB,KAAKX,GAETA,EAAYK,OACdpB,EAAQ0B,KAAKX,IAEbA,EAAYF,aAAeA,EAC3BZ,EAAoByB,KAAKX,IAG7B/B,EAAK2C,SAAS,CAAE3B,UAASC,sBAAqBC,YA5BjB,wBAAAc,EAAAY,SAAAjB,MAAT,gBAAAkB,GAAA,OAAAnB,EAAAoB,MAAA3C,KAAA4C,YAAA,IANX,OAML5B,EANKE,EAAA2B,KAqCXC,QAAQC,IAAI/B,GAASmB,KAAK,kBAAMa,QAAQC,IAAI,kBArCjC,wBAAA/B,EAAAuB,SAAA/B,MA/DM,gBAAAwC,GAAA,OAAA7C,EAAAsC,MAAA3C,KAAA4C,YAAA,GAAA/C,EAuGnBsD,WAAa,WACX,OAAOC,MAAM,4EAtGbvD,EAAKwD,MAAQ,CACXC,KAAM,GACN3C,KAAM,GACN4C,KAAM,GACN1C,QAAS,GACTC,oBAAqB,GACrBC,QAAS,GACTyC,YAAY,GAEd3D,EAAK4D,WAAa5D,EAAK4D,WAAWC,KAAhB5D,OAAA6D,EAAA,EAAA7D,CAAAD,IAClBA,EAAK+D,aAAe/D,EAAK+D,aAAaF,KAAlB5D,OAAA6D,EAAA,EAAA7D,CAAAD,IAZHA,4EAeNd,GACX,IAAM8E,EAAQ9E,EAAE+E,OAAOD,MACnBA,GAASA,EAAM,IAAI7D,KAAKwC,SAAS,CAAEc,KAAMO,EAAM,2CAGhC,IAAAE,EAAA/D,KAARgE,EAAQC,EAARD,KACX,GAAa,QAATA,EAAgB,OAAOZ,MAAM,sEACjCpD,KAAKwC,SAAS,CAAEgB,YAAY,IAE5B,IAAMU,EAAS,IAAIC,WACbC,IAASF,EAAOG,mBAEtBH,EAAOI,OAAP,eAAAC,EAAAzE,OAAAQ,EAAA,EAAAR,CAAAS,EAAAC,EAAAC,KAAgB,SAAA+D,EAAMzF,GAAN,IAAA0F,EAAAC,EAAAC,EAAAC,EAAAjE,EAAA,OAAAJ,EAAAC,EAAAS,KAAA,SAAA4D,GAAA,cAAAA,EAAA1D,KAAA0D,EAAAzD,MAAA,UACd4B,QAAQC,IAAI,UAENwB,EAAO1F,EAAE+E,OAAOgB,OAChBJ,EAAK9F,IAAKmG,KAAKN,EAAM,CACzBT,KAAMI,EAAO,SAAW,QACxBY,SAAS,IAGLL,EAASD,EAAGO,WAAW,GAC7BjC,QAAQC,IAAI0B,GACNC,EAAKF,EAAGQ,OAAOP,GAEfhE,EAAO/B,IAAKC,MAAMsG,cAAcP,GACzB,QAATZ,EAdU,CAAAa,EAAAzD,KAAA,gBAAAyD,EAAAzD,KAAA,GAeN2C,EAAK3D,WAAWO,GAfV,QAAAkE,EAAAzD,KAAA,iBAkBZ2C,EAAKZ,WAAWxC,GAlBJ,QAqBdoD,EAAKvB,SACH,CAAE7B,KAAMA,EAAM4C,KAAM/E,EAAUoG,EAAG,SAAUpB,YAAY,GACvD,WACER,QAAQC,IAAImC,KAAKC,UAAUtB,EAAKV,MAAM1C,KAAM,KAAM,MAxBxC,yBAAAkE,EAAApC,SAAA+B,MAAhB,gBAAAc,GAAA,OAAAf,EAAA5B,MAAA3C,KAAA4C,YAAA,GA6BIwB,EACFF,EAAOG,mBAAmBrE,KAAKqD,MAAMC,MAErCY,EAAOqB,kBAAkBvF,KAAKqD,MAAMC,uCAqD/B,IAAAkC,EAAAxF,KACDyF,EACJC,OAAO1F,KAAKqD,MAAMtC,QAAQ4E,QAAUD,OAAO1F,KAAKqD,MAAMxC,QAAQ8E,QAChE,OACEC,EAAApF,EAAAqF,cAAA,OACEC,MAAO,CACLC,QAAS,OACTC,WAAY,SACZC,cAAe,WAGjBL,EAAApF,EAAAqF,cAAA,OACEC,MAAO,CACLI,MAAO,IACPC,OAAQ,IACRC,gBAAiB,aACjBC,aAAc,GACdN,QAAS,OACTE,cAAe,SACfK,eAAgB,SAChBN,WAAY,WAGdJ,EAAApF,EAAAqF,cAAA,SAAOU,QAAQ,QAAf,uBACAX,EAAApF,EAAAqF,cAAA,WACAD,EAAApF,EAAAqF,cAAA,SACE7B,KAAK,OACLwC,UAAU,eACVC,GAAG,OACHC,OAAQC,YACRC,SAAU5G,KAAK4D,aACfkC,MAAO,CACLI,MAAO,IACPC,OAAQ,GACRC,gBAAiB,YACjBC,aAAc,GACdC,eAAgB,YAGpBV,EAAApF,EAAAqF,cAAA,WACAD,EAAApF,EAAAqF,cAAA,SACE7B,KAAK,SACL6C,MAAM,UACNf,MAAO,CACLI,MAAO,IACPC,OAAQ,GACRC,gBAAiB,YACjBC,aAAc,IAEhBS,QAAS,kBAAMtB,EAAK/B,WAAW,CAAEO,KAAM,WAEzC4B,EAAApF,EAAAqF,cAAA,SACE7B,KAAK,SACL6C,MAAM,UACNf,MAAO,CACLI,MAAO,IACPC,OAAQ,GACRC,gBAAiB,YACjBC,aAAc,IAEhBS,QAAS,kBAAMtB,EAAK/B,WAAW,CAAEO,KAAM,YAG3C4B,EAAApF,EAAAqF,cAAA,WACED,EAAApF,EAAAqF,cAAA,OAAKC,MAAO,CAAEiB,UAAW,SAAUC,SAAU,GAAIC,WAAY,QAA7D,oCACW,IACRjH,KAAKqD,MAAMG,WACVoC,EAAApF,EAAAqF,cAAA,sCAEAD,EAAApF,EAAAqF,cAAA,YACG7F,KAAKqD,MAAMtC,QAAQ4E,OADtB,MACiCF,EADjC,WAKHzF,KAAKqD,MAAMtC,QAAQO,IAAI,SAAAG,GAAI,OAC1BmE,EAAApF,EAAAqF,cAAA,OAAKC,MAAO,CAAEoB,aAAc,EAAGF,SAAU,GAAIG,MAAO,QACjD1F,EAAKC,gBAGVkE,EAAApF,EAAAqF,cAAA,OAAKC,MAAO,CAAEiB,UAAW,SAAUC,SAAU,GAAIC,WAAY,QAA7D,2CACa,IACVjH,KAAKqD,MAAMG,WACVoC,EAAApF,EAAAqF,cAAA,sCAEAD,EAAApF,EAAAqF,cAAA,YACG7F,KAAKqD,MAAMvC,oBAAoB6E,OADlC,MAC6CF,EAD7C,WAKJG,EAAApF,EAAAqF,cAAA,KACEC,MAAO,CACLsB,OAAQ,EACRC,UAAW,EACXH,aAAc,GACdH,UAAW,WALf,wHAUC/G,KAAKqD,MAAMvC,oBAAoBQ,IAAI,SAAAG,GAAI,OACtCmE,EAAApF,EAAAqF,cAAA,OAAKC,MAAO,CAAEoB,aAAc,EAAGF,SAAU,KACtCvF,EAAKC,gBAGVkE,EAAApF,EAAAqF,cAAA,OAAKC,MAAO,CAAEiB,UAAW,SAAUC,SAAU,GAAIC,WAAY,QAA7D,0CACY,IACTjH,KAAKqD,MAAMG,WACVoC,EAAApF,EAAAqF,cAAA,sCAEAD,EAAApF,EAAAqF,cAAA,YACG7F,KAAKqD,MAAMxC,QAAQ8E,OADtB,MACiCF,EADjC,WAKHzF,KAAKqD,MAAMxC,QAAQS,IAAI,SAAAG,GAAI,OAC1BmE,EAAApF,EAAAqF,cAAA,OAAKC,MAAO,CAAEoB,aAAc,EAAGF,SAAU,KACtCvF,EAAKC,yBArOM4F,aCPNC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjC,EAAApF,EAAAqF,cAACiC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhG,KAAK,SAAAiG,GACjCA,EAAaC","file":"static/js/main.c263688c.chunk.js","sourcesContent":["import XLSX from \"xlsx\";\n/* generate an array of column objects */\nexport const make_cols = refstr => {\n  let o = [],\n    C = XLSX.utils.decode_range(refstr).e.c + 1;\n  for (var i = 0; i < C; ++i) o[i] = { name: XLSX.utils.encode_col(i), key: i };\n  return o;\n};\n","import React, { Component } from \"react\";\n// import { Fabric } from \"office-ui-fabric-react/lib/Fabric\";\n// import { DefaultButton } from \"office-ui-fabric-react/lib/Button\";\nimport XLSX from \"xlsx\";\nimport { make_cols } from \"./MakeColumns\";\nimport { SheetJSFT } from \"./types\";\n\nimport Eos from \"eosjs\";\nimport { selectProperties } from \"@uifabric/utilities\";\n// import Web3 from \"web3\";\n\nconst config = {\n  chainId: \"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906\", // 32 byte (64 char) hex string\n  httpEndpoint: \"https://proxy.eosnode.tools:443\",\n  expireInSeconds: 60,\n  broadcast: true,\n  verbose: false // API activity\n};\n\nclass ExcelReader extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      file: {},\n      data: [],\n      cols: [],\n      success: [],\n      successFormatIssues: [],\n      invalid: [],\n      isFetching: false\n    };\n    this.handleFile = this.handleFile.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    const files = e.target.files;\n    if (files && files[0]) this.setState({ file: files[0] });\n  }\n\n  handleFile({ type }) {\n    if (type === \"ETH\") return alert(\"준비 중, 체력 되면 서비스!\");\n    this.setState({ isFetching: true });\n    /* Boilerplate to set up FileReader */\n    const reader = new FileReader();\n    const rABS = !!reader.readAsBinaryString;\n\n    reader.onload = async e => {\n      console.log(\"onload\");\n      /* Parse data */\n      const bstr = e.target.result;\n      const wb = XLSX.read(bstr, {\n        type: rABS ? \"binary\" : \"array\",\n        bookVBA: true\n      });\n      /* Get first worksheet */\n      const wsname = wb.SheetNames[0];\n      console.log(wsname);\n      const ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n      const data = XLSX.utils.sheet_to_json(ws);\n      if (type === \"EOS\") {\n        await this.eosChecker(data);\n      } else {\n        // alert(\"준비 중, 체력 되면 서비스!\");\n        this.ethChecker(data);\n      }\n      /* Update state */\n      this.setState(\n        { data: data, cols: make_cols(ws[\"!ref\"]), isFetching: false },\n        () => {\n          console.log(JSON.stringify(this.state.data, null, 2));\n        }\n      );\n    };\n\n    if (rABS) {\n      reader.readAsBinaryString(this.state.file);\n    } else {\n      reader.readAsArrayBuffer(this.state.file);\n    }\n  }\n\n  eosChecker = async data => {\n    const eos = Eos(config);\n    const success = [];\n    const successFormatIssues = [];\n    const invalid = [];\n\n    const promise = await data.map(async item => {\n      const account_name = item.account_name;\n      const account_name2 = item.account_name.trim().toLowerCase();\n\n      const itemChecker = {\n        account_name: account_name2,\n        checker: \"\"\n      };\n      // format checker\n      account_name === account_name2\n        ? (itemChecker.format = true)\n        : (itemChecker.format = false);\n\n      await eos\n        .getAccount(itemChecker.account_name)\n        .then(res => (itemChecker.checker = \"O\"))\n        .catch(err => (itemChecker.checker = \"X\"));\n\n      if (itemChecker.checker === \"X\") {\n        invalid.push(itemChecker);\n      } else {\n        if (itemChecker.format) {\n          success.push(itemChecker);\n        } else {\n          itemChecker.account_name = account_name;\n          successFormatIssues.push(itemChecker);\n        }\n      }\n      this.setState({ success, successFormatIssues, invalid });\n    });\n\n    Promise.all(promise).then(() => console.log(\"완료\"));\n  };\n\n  ethChecker = () => {\n    return alert(\"준비 중, 체력이 되면 서비스\");\n    // const web3 = new Web3(\n    //   new Web3.providers.HttpProvider(\n    //     \"https://mainnet.infura.io/v3/cf16c56de1c2469fa3b69ae061cb778f\"\n    //   )\n    // );\n  };\n\n  render() {\n    const total =\n      Number(this.state.invalid.length) + Number(this.state.success.length);\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          flexDirection: \"column\"\n        }}\n      >\n        <div\n          style={{\n            width: 500,\n            height: 500,\n            backgroundColor: \"whitesmoke\",\n            borderRadius: 15,\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n          }}\n        >\n          <label htmlFor=\"file\">EOS ACCOUNT CHECKER</label>\n          <br />\n          <input\n            type=\"file\"\n            className=\"form-control\"\n            id=\"file\"\n            accept={SheetJSFT}\n            onChange={this.handleChange}\n            style={{\n              width: 200,\n              height: 30,\n              backgroundColor: \"lightgrey\",\n              borderRadius: 10,\n              justifyContent: \"center\"\n            }}\n          />\n          <br />\n          <input\n            type=\"submit\"\n            value=\"RUN EOS\"\n            style={{\n              width: 200,\n              height: 30,\n              backgroundColor: \"lightgrey\",\n              borderRadius: 10\n            }}\n            onClick={() => this.handleFile({ type: \"EOS\" })}\n          />\n          <input\n            type=\"submit\"\n            value=\"RUN ETH\"\n            style={{\n              width: 200,\n              height: 30,\n              backgroundColor: \"lightgrey\",\n              borderRadius: 10\n            }}\n            onClick={() => this.handleFile({ type: \"ETH\" })}\n          />\n        </div>\n        <div>\n          <div style={{ textAlign: \"center\", fontSize: 30, fontWeight: \"600\" }}>\n            오기입 계정 -{\" \"}\n            {this.state.isFetching ? (\n              <span>진행 중...</span>\n            ) : (\n              <span>\n                {this.state.invalid.length} / {total}건\n              </span>\n            )}\n          </div>\n          {this.state.invalid.map(item => (\n            <div style={{ marginBottom: 5, fontSize: 15, color: \"red\" }}>\n              {item.account_name}\n            </div>\n          ))}\n          <div style={{ textAlign: \"center\", fontSize: 30, fontWeight: \"600\" }}>\n            확인 필요 계정 -{\" \"}\n            {this.state.isFetching ? (\n              <span>진행 중...</span>\n            ) : (\n              <span>\n                {this.state.successFormatIssues.length} / {total}건\n              </span>\n            )}\n          </div>\n          <p\n            style={{\n              margin: 0,\n              marginTop: 5,\n              marginBottom: 10,\n              textAlign: \"center\"\n            }}\n          >\n            대문자, 엑셀 내 띄어쓰기 등의 문제 확인 필요\n          </p>\n          {this.state.successFormatIssues.map(item => (\n            <div style={{ marginBottom: 5, fontSize: 15 }}>\n              {item.account_name}\n            </div>\n          ))}\n          <div style={{ textAlign: \"center\", fontSize: 30, fontWeight: \"600\" }}>\n            정상기입 계정 -{\" \"}\n            {this.state.isFetching ? (\n              <span>진행 중...</span>\n            ) : (\n              <span>\n                {this.state.success.length} / {total}건\n              </span>\n            )}\n          </div>\n          {this.state.success.map(item => (\n            <div style={{ marginBottom: 5, fontSize: 15 }}>\n              {item.account_name}\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ExcelReader;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}